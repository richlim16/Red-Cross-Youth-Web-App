{"remainingRequest":"C:\\Users\\richl\\Desktop\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\richl\\Desktop\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\richl\\Desktop\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\richl\\Desktop\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"C:\\Users\\richl\\Desktop\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\Home.vue","mtime":1615517638367},{"path":"C:\\Users\\richl\\Desktop\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615517626407},{"path":"C:\\Users\\richl\\Desktop\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615517637464},{"path":"C:\\Users\\richl\\Desktop\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615517626407},{"path":"C:\\Users\\richl\\Desktop\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1615517637463}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}